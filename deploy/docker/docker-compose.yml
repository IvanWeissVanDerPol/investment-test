version: '3.8'

services:
  # Main application
  investmentai:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    container_name: investmentai-app
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://investmentai:${DB_PASSWORD}@postgres:5432/investmentai
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENABLE_HTTPS=true
      - DEBUG=false
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
      - app_reports:/app/reports
      - app_models:/app/models
      - app_backups:/app/backups
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - investmentai-network

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: investmentai-db
    environment:
      - POSTGRES_DB=investmentai
      - POSTGRES_USER=investmentai
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U investmentai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - investmentai-network

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: investmentai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - investmentai-network
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Background worker for ML tasks
  worker:
    build:
      context: ../../
      dockerfile: deploy/docker/Dockerfile
    container_name: investmentai-worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://investmentai:${DB_PASSWORD}@postgres:5432/investmentai
      - REDIS_URL=redis://redis:6379/0
      - WORKER_MODE=true
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
      - app_models:/app/models
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - investmentai-network
    command: ["python", "scripts/run_background_worker.py"]

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: investmentai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - app_logs:/var/log/nginx
    depends_on:
      - investmentai
    restart: unless-stopped
    networks:
      - investmentai-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: investmentai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - investmentai-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: investmentai-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - investmentai-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  app_data:
  app_logs:
  app_cache:
  app_reports:
  app_models:
  app_backups:

networks:
  investmentai-network:
    driver: bridge